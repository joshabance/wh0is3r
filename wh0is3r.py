# Simple Script of WHOIS Domain / IP Checking

#system functions
import os, sys, platform

#other modules
import validators
import requests
import socket
import json
import datetime

#import colorama for script colors and better ui
from colorama import init 
from colorama import Fore, Style

#initialize colorama
init()


class WhoIsSer():
	def __init__(self, ipUrl, whatamI):
		super(WhoIsSer, self).__init__()
		self.__ipUrl = ipUrl
		self.__whatamI = whatamI
		self.__dateTimeNow = str(datetime.datetime.now().date())
		self.__rootDir = os.path.dirname(os.path.abspath(__file__)) #get working dir
		# base temp log
		self.__baseLog = """

	$IpDomain: $ipUrl
	Log Generated: $genDatetime
	
	Result:
		[+]------------------------------------[+]
			Main
				Name: $name
				Created: $created
				Changed: $changed
				Expires: $expires
				DNSSEC: $dnssec
				Registered: $registered
				Status: $status
				Nameservers: $nameservers

			Contacts
				Owner:
					Handle: $ownner-handle
					Type: $owner-type
					Name: $owner-name
					Organization: $owner-organization
					Email: $owner-email
					Address: $owner-address
					Zip Code: $owner-zipcode
					City: $owner-city
					State: $owner-state
					Country: $owner-country
					Phone: $owner-phone
					Fax: $owner-fax
					Created: $owner-created
					Changed: $owner-changed
				Admin:
					Handle: $admin-handle
					Type: $admin-type
					Name: $admin-name
					Organization: $admin-organization
					Email: $admin-email
					Address: $admin-address
					Zip Code: $admin-zipcode
					City: $admin-city
					State: $admin-state
					Country: $admin-country
					Phone: $admin-phone
					Fax: $admin-fax
					Created: $admin-created
					Changed: $admin-changed
				Tech:
					Handle: $tech-handle
					Type: $tech-type
					Name: $tech-name
					Organization: $tech-organization
					Email: $tech-email
					Address: $tech-address
					Zip Code: $tech-zipcode
					City: $tech-city
					State: $tech-state
					Country: $tech-country
					Phone: $tech-phone
					Fax: $tech-fax
					Created: $tech-created
					Changed: $tech-changed

			Registrar
				ID: $reg-id
				Name: $reg-name
				Email: $reg-email
				URL: $reg-url
				Phone: $reg-phone


	-Log Generated by: WH0IS3R v0.1 [Anna Kushina]-

		"""
		#get WEB CARGO Api from config.json file
		with open("config.json", "r") as wcApi:
			self.__rawApi = json.load(wcApi)
		self.__baseReqUrl = "https://api.webcargo.io/whois?key=" + self.__rawApi['webcargo-api'] + "&identifier=" + self.__ipUrl
	# get data if url or IP is registered
	def runWebIp(self):
		__conOwner = True
		__conAdmin = True
		__conTech = True
		__conAbuse = True
		__webReg = True
		__webNet = True
		try:
			# main info
			__rWebResp = requests.get(self.__baseReqUrl).json()
			__rWebName = str(__rWebResp['result']['name'])
			__rWebCreated = str(__rWebResp['result']['created'])
			__rWebChanged = str(__rWebResp['result']['changed'])
			__rWebExpires = str(__rWebResp['result']['expires'])
			__rWebDnssec = str(__rWebResp['result']['dnssec'])
			__rWebRegistered = str(__rWebResp['result']['registered'])
			__rWebStatus = __rWebResp['result']['status']
			__rWebNS = __rWebResp['result']['nameservers']

			# owner details
			try:
				__rWebConOwner = __rWebResp['result']['contacts']['owner']
				if __rWebConOwner == None:
					__conOwner = False
				else:
					__rWebConOwnerHandle = str(__rWebResp['result']['contacts']['owner'][0]['handle'])
					__rWebConOwnerType = str(__rWebResp['result']['contacts']['owner'][0]['type'])
					__rWebConOwnerName = str(__rWebResp['result']['contacts']['owner'][0]['name'])
					__rWebConOwnerOrganization = str(__rWebResp['result']['contacts']['owner'][0]['organization'])
					__rWebConOwnerEmail = str(__rWebResp['result']['contacts']['owner'][0]['email'])
					__rWebConOwnerAddress = str(__rWebResp['result']['contacts']['owner'][0]['address'])
					__rWebConOwnerZipcode = str(__rWebResp['result']['contacts']['owner'][0]['zipcode'])
					__rWebConOwnerCity = str(__rWebResp['result']['contacts']['owner'][0]['city'])
					__rWebConOwnerState = str(__rWebResp['result']['contacts']['owner'][0]['state'])
					__rWebConOwnerCountry = str(__rWebResp['result']['contacts']['owner'][0]['country'])
					__rWebConOwnerPhone = str(__rWebResp['result']['contacts']['owner'][0]['phone'])
					__rWebConOwnerFax = str(__rWebResp['result']['contacts']['owner'][0]['fax'])
					__rWebConOwnerCreated = str(__rWebResp['result']['contacts']['owner'][0]['created'])
					__rWebConOwnerChanged = str(__rWebResp['result']['contacts']['owner'][0]['changed'])
			except KeyError:
				__conOwner = False
			except Exception:
				__conOwner = False

			# admin details
			try:
				if __rWebConAdmin == None:
					__conAdmin = False
				else:
					__rWebConAdminHandle = str(__rWebResp['result']['contacts']['admin'][0]['handle'])
					__rWebConAdminType = str(__rWebResp['result']['contacts']['admin'][0]['type'])
					__rWebConAdminName = str(__rWebResp['result']['contacts']['admin'][0]['name'])
					__rWebConAdminOrganization = str(__rWebResp['result']['contacts']['admin'][0]['organization'])
					__rWebConAdminEmail = str(__rWebResp['result']['contacts']['admin'][0]['email'])
					__rWebConAdminAddress = str(__rWebResp['result']['contacts']['admin'][0]['address'])
					__rWebConAdminZipcode = str(__rWebResp['result']['contacts']['admin'][0]['zipcode'])
					__rWebConAdminCity = str(__rWebResp['result']['contacts']['admin'][0]['city'])
					__rWebConAdminState = str(__rWebResp['result']['contacts']['admin'][0]['state'])
					__rWebConAdminCountry = str(__rWebResp['result']['contacts']['admin'][0]['country'])
					__rWebConAdminPhone = str(__rWebResp['result']['contacts']['admin'][0]['phone'])
					__rWebConAdminFax = str(__rWebResp['result']['contacts']['admin'][0]['fax'])
					__rWebConAdminCreated = str(__rWebResp['result']['contacts']['admin'][0]['created'])
					__rWebConAdminChanged = str(__rWebResp['result']['contacts']['admin'][0]['changed'])
			except KeyError:
				__conAdmin = False
			except Exception:
				__conAdmin = False

			# tech details
			try:
				if __rWebConTech == None:
					__conTech = False
				else:
					__rWebConTechHandle = str(__rWebResp['result']['contacts']['tech'][0]['handle'])
					__rWebConTechType = str(__rWebResp['result']['contacts']['tech'][0]['type'])
					__rWebConTechName = str(__rWebResp['result']['contacts']['tech'][0]['name'])
					__rWebConTechOrganization = str(__rWebResp['result']['contacts']['tech'][0]['organization'])
					__rWebConTechEmail = str(__rWebResp['result']['contacts']['tech'][0]['email'])
					__rWebConTechAddress = str(__rWebResp['result']['contacts']['tech'][0]['address'])
					__rWebConTechZipcode = str(__rWebResp['result']['contacts']['tech'][0]['zipcode'])
					__rWebConTechCity = str(__rWebResp['result']['contacts']['tech'][0]['city'])
					__rWebConTechState = str(__rWebResp['result']['contacts']['tech'][0]['state'])
					__rWebConTechCountry = str(__rWebResp['result']['contacts']['tech'][0]['country'])
					__rWebConTechPhone = str(__rWebResp['result']['contacts']['tech'][0]['phone'])
					__rWebConTechFax = str(__rWebResp['result']['contacts']['tech'][0]['fax'])
					__rWebConTechCreated = str(__rWebResp['result']['contacts']['tech'][0]['created'])
					__rWebConTechChanged = str(__rWebResp['result']['contacts']['tech'][0]['changed'])
			except KeyError:
				__conTech = False
			except Exception:
				__conTech = False

			# abuse details
			try:
				if __rWebConAbuse == None:
					__conAbuse = False
				else:
					__rWebConAbuseHandle = str(__rWebResp['result']['contacts']['abuse'][0]['handle'])
					__rWebConAbuseType = str(__rWebResp['result']['contacts']['abuse'][0]['type'])
					__rWebConAbuseName = str(__rWebResp['result']['contacts']['abuse'][0]['name'])
					__rWebConAbuseOrganization = str(__rWebResp['result']['contacts']['abuse'][0]['organization'])
					__rWebConAbuseEmail = str(__rWebResp['result']['contacts']['abuse'][0]['email'])
					__rWebConAbuseAddress = str(__rWebResp['result']['contacts']['abuse'][0]['address'])
					__rWebConAbuseZipcode = str(__rWebResp['result']['contacts']['abuse'][0]['zipcode'])
					__rWebConAbuseCity = str(__rWebResp['result']['contacts']['abuse'][0]['city'])
					__rWebConAbuseState = str(__rWebResp['result']['contacts']['abuse'][0]['state'])
					__rWebConAbuseCountry = str(__rWebResp['result']['contacts']['abuse'][0]['country'])
					__rWebConAbusePhone = str(__rWebResp['result']['contacts']['abuse'][0]['phone'])
					__rWebConAbuseFax = str(__rWebResp['result']['contacts']['abuse'][0]['fax'])
					__rWebConAbuseCreated = str(__rWebResp['result']['contacts']['abuse'][0]['created'])
					__rWebConAbuseChanged = str(__rWebResp['result']['contacts']['abuse'][0]['changed'])
			except KeyError:
				__conAbuse = False
			except Exception:
				__conAbuse = False

			# registrar info
			try:
				__rWebReg = __rWebResp['result']['registrar']
				if __rWebReg == None:
					__webReg = False
				else:
					__rWebRegId = str(__rWebResp['result']['registrar']['id'])
					__rWebRegName = str(__rWebResp['result']['registrar']['name'])
					__rWebRegEmail = str(__rWebResp['result']['registrar']['email'])
					__rWebRegURL = str(__rWebResp['result']['registrar']['url'])
					__rWebRegPhone = str(__rWebResp['result']['registrar']['phone'])
			except KeyError:
				__webReg = False

			# network info
			try:
				__rWebNet = __rWebResp['result']['network']
				if __rWebNet == None:
					__webNet = False
				else:
					__rWebNetInetnum = str(__rWebResp['result']['network']['inetnum'])
					__rWebNetName = str(__rWebResp['result']['network']['name'])
					__rWebNetHandle = str(__rWebResp['result']['network']['handle'])
			except KeyError:
				__webNet = False
				
			print("\n\t\t\t[+]---------------------------------------[+]\n")
			print(Fore.LIGHTGREEN_EX + "\t\t\t  [i] Name:" + Fore.YELLOW, __rWebName)
			print(Fore.LIGHTGREEN_EX + "\t\t\t  [i] Created:" + Fore.YELLOW, __rWebCreated)
			print(Fore.LIGHTGREEN_EX + "\t\t\t  [i] Changed:" + Fore.YELLOW, __rWebChanged)
			print(Fore.LIGHTGREEN_EX + "\t\t\t  [i] Expires:" + Fore.YELLOW, __rWebExpires)
			print(Fore.LIGHTGREEN_EX + "\t\t\t  [i] DnsSec:" + Fore.YELLOW, __rWebDnssec)
			print(Fore.LIGHTGREEN_EX + "\t\t\t  [i] Registered:" + Fore.YELLOW, __rWebRegistered)
			# fix status
			__xrWebStatus = str(__rWebStatus)
			if type(__rWebStatus) == type(str()):
				print(Fore.LIGHTGREEN_EX + "\t\t\t  [i] Status: " + Fore.YELLOW, __rWebStatus)
			else:
				print(Fore.LIGHTGREEN_EX + "\t\t\t  [i] Status: ")
				if __rWebStatus == None:
					print(Fore.YELLOW + "\t\t\t\t  | None")
				else:
					for xStat in __rWebStatus:
						print(Fore.YELLOW + "\t\t\t\t  | " + xStat)
			# get nameservers
			__xrWebNS = str(__rWebNS)
			print(Fore.LIGHTGREEN_EX + "\t\t\t  [i] Nameservers: ")
			if __rWebNS == None:
				print(Fore.YELLOW + "\t\t\t\t  | None")
			else:
				for xNS in __rWebNS:
					print(Fore.YELLOW + "\t\t\t\t | " + xNS)
			# get contacts owner
			if __conOwner == False:
				pass
			else:
				print(Fore.LIGHTGREEN_EX + "\t\t\t     [i] Owner: ")
				print(Fore.YELLOW + "\t\t\t\t ] Handle:" + Fore.LIGHTMAGENTA_EX, __rWebConOwnerHandle)
				print(Fore.YELLOW + "\t\t\t\t ] Type:" + Fore.LIGHTMAGENTA_EX, __rWebConOwnerType)
				print(Fore.YELLOW + "\t\t\t\t ] Name:" + Fore.LIGHTMAGENTA_EX, __rWebConOwnerName)
				print(Fore.YELLOW + "\t\t\t\t ] Organization:" + Fore.LIGHTMAGENTA_EX, __rWebConOwnerOrganization)
				print(Fore.YELLOW + "\t\t\t\t ] Email:" + Fore.LIGHTMAGENTA_EX, __rWebConOwnerEmail)
				print(Fore.YELLOW + "\t\t\t\t ] Address:" + Fore.LIGHTMAGENTA_EX, __rWebConOwnerAddress)
				print(Fore.YELLOW + "\t\t\t\t ] Zipcode:" + Fore.LIGHTMAGENTA_EX, __rWebConOwnerZipcode)
				print(Fore.YELLOW + "\t\t\t\t ] City:" + Fore.LIGHTMAGENTA_EX, __rWebConOwnerCity)
				print(Fore.YELLOW + "\t\t\t\t ] State:" + Fore.LIGHTMAGENTA_EX, __rWebConOwnerState)
				print(Fore.YELLOW + "\t\t\t\t ] Country:" + Fore.LIGHTMAGENTA_EX, __rWebConOwnerCountry)
				print(Fore.YELLOW + "\t\t\t\t ] Phone:" + Fore.LIGHTMAGENTA_EX, __rWebConOwnerPhone)
				print(Fore.YELLOW + "\t\t\t\t ] Fax:" + Fore.LIGHTMAGENTA_EX, __rWebConOwnerFax)
				print(Fore.YELLOW + "\t\t\t\t ] Created:" + Fore.LIGHTMAGENTA_EX, __rWebConOwnerCreated)
				print(Fore.YELLOW + "\t\t\t\t ] Changed:" + Fore.LIGHTMAGENTA_EX, __rWebConOwnerChanged)
			# get contacts admin
			if __conAdmin == False:
				pass
			else:
				print(Fore.LIGHTGREEN_EX + "\t\t\t     [i] Admin: ")
				print(Fore.YELLOW + "\t\t\t\t ] Handle:" + Fore.LIGHTMAGENTA_EX, __rWebConAdminHandle)
				print(Fore.YELLOW + "\t\t\t\t ] Type:" + Fore.LIGHTMAGENTA_EX, __rWebConAdminType)
				print(Fore.YELLOW + "\t\t\t\t ] Name:" + Fore.LIGHTMAGENTA_EX, __rWebConAdminName)
				print(Fore.YELLOW + "\t\t\t\t ] Organization:" + Fore.LIGHTMAGENTA_EX, __rWebConAdminOrganization)
				print(Fore.YELLOW + "\t\t\t\t ] Email:" + Fore.LIGHTMAGENTA_EX, __rWebConAdminEmail)
				print(Fore.YELLOW + "\t\t\t\t ] Address:" + Fore.LIGHTMAGENTA_EX, __rWebConAdminAddress)
				print(Fore.YELLOW + "\t\t\t\t ] Zipcode:" + Fore.LIGHTMAGENTA_EX, __rWebConAdminZipcode)
				print(Fore.YELLOW + "\t\t\t\t ] City:" + Fore.LIGHTMAGENTA_EX, __rWebConAdminCity)
				print(Fore.YELLOW + "\t\t\t\t ] State:" + Fore.LIGHTMAGENTA_EX, __rWebConAdminState)
				print(Fore.YELLOW + "\t\t\t\t ] Country:" + Fore.LIGHTMAGENTA_EX, __rWebConAdminCountry)
				print(Fore.YELLOW + "\t\t\t\t ] Phone:" + Fore.LIGHTMAGENTA_EX, __rWebConAdminPhone)
				print(Fore.YELLOW + "\t\t\t\t ] Fax:" + Fore.LIGHTMAGENTA_EX, __rWebConAdminFax)
				print(Fore.YELLOW + "\t\t\t\t ] Created:" + Fore.LIGHTMAGENTA_EX, __rWebConAdminCreated)
				print(Fore.YELLOW + "\t\t\t\t ] Changed:" + Fore.LIGHTMAGENTA_EX, __rWebConAdminChanged)
			# get contacts tech
			if __conTech == False:
				pass
			else:
				print(Fore.LIGHTGREEN_EX + "\t\t\t     [i] Tech: ")
				print(Fore.YELLOW + "\t\t\t\t ] Handle:" + Fore.LIGHTMAGENTA_EX, __rWebConTechHandle)
				print(Fore.YELLOW + "\t\t\t\t ] Type:" + Fore.LIGHTMAGENTA_EX, __rWebConTechType)
				print(Fore.YELLOW + "\t\t\t\t ] Name:" + Fore.LIGHTMAGENTA_EX, __rWebConTechName)
				print(Fore.YELLOW + "\t\t\t\t ] Organization: " + Fore.LIGHTMAGENTA_EX, __rWebConTechOrganization)
				print(Fore.YELLOW + "\t\t\t\t ] Email:" + Fore.LIGHTMAGENTA_EX, __rWebConTechEmail)
				print(Fore.YELLOW + "\t\t\t\t ] Address:" + Fore.LIGHTMAGENTA_EX, __rWebConTechAddress)
				print(Fore.YELLOW + "\t\t\t\t ] Zipcode:" + Fore.LIGHTMAGENTA_EX, __rWebConTechZipcode)
				print(Fore.YELLOW + "\t\t\t\t ] City:" + Fore.LIGHTMAGENTA_EX, __rWebConTechCity)
				print(Fore.YELLOW + "\t\t\t\t ] State:" + Fore.LIGHTMAGENTA_EX, __rWebConTechState)
				print(Fore.YELLOW + "\t\t\t\t ] Country:" + Fore.LIGHTMAGENTA_EX, __rWebConTechCountry)
				print(Fore.YELLOW + "\t\t\t\t ] Phone:" + Fore.LIGHTMAGENTA_EX, __rWebConTechPhone)
				print(Fore.YELLOW + "\t\t\t\t ] Fax:" + Fore.LIGHTMAGENTA_EX, __rWebConTechFax)
				print(Fore.YELLOW + "\t\t\t\t ] Created:" + Fore.LIGHTMAGENTA_EX, __rWebConTechCreated)
				print(Fore.YELLOW + "\t\t\t\t ] Changed:" + Fore.LIGHTMAGENTA_EX, __rWebConTechChanged)
			# get contacts abuse
			if __conAbuse == False:
				pass
			else:
				print(Fore.LIGHTGREEN_EX + "\t\t\t     [i] Abuse: ")
				print(Fore.YELLOW + "\t\t\t\t ] Handle:" + Fore.LIGHTMAGENTA_EX, __rWebConAbuseHandle)
				print(Fore.YELLOW + "\t\t\t\t ] Type:" + Fore.LIGHTMAGENTA_EX, __rWebConAbuseType)
				print(Fore.YELLOW + "\t\t\t\t ] Name:" + Fore.LIGHTMAGENTA_EX, __rWebConAbuseName)
				print(Fore.YELLOW + "\t\t\t\t ] Organization: " + Fore.LIGHTMAGENTA_EX, __rWebConAbuseOrganization)
				print(Fore.YELLOW + "\t\t\t\t ] Email:" + Fore.LIGHTMAGENTA_EX, __rWebConAbuseEmail)
				print(Fore.YELLOW + "\t\t\t\t ] Address:" + Fore.LIGHTMAGENTA_EX, __rWebConAbuseAddress)
				print(Fore.YELLOW + "\t\t\t\t ] Zipcode:" + Fore.LIGHTMAGENTA_EX, __rWebConAbuseZipcode)
				print(Fore.YELLOW + "\t\t\t\t ] City:" + Fore.LIGHTMAGENTA_EX, __rWebConAbuseCity)
				print(Fore.YELLOW + "\t\t\t\t ] State:" + Fore.LIGHTMAGENTA_EX, __rWebConAbuseState)
				print(Fore.YELLOW + "\t\t\t\t ] Country:" + Fore.LIGHTMAGENTA_EX, __rWebConAbuseCountry)
				print(Fore.YELLOW + "\t\t\t\t ] Phone:" + Fore.LIGHTMAGENTA_EX, __rWebConAbusePhone)
				print(Fore.YELLOW + "\t\t\t\t ] Fax:" + Fore.LIGHTMAGENTA_EX, __rWebConAbuseFax)
				print(Fore.YELLOW + "\t\t\t\t ] Created:" + Fore.LIGHTMAGENTA_EX, __rWebConAbuseCreated)
				print(Fore.YELLOW + "\t\t\t\t ] Changed:" + Fore.LIGHTMAGENTA_EX, __rWebConAbuseChanged)
			# get registrar info
			if __webReg == False:
				print(Fore.LIGHTGREEN_EX + "\t\t\t  [i] Registrar: " + Fore.LIGHTMAGENTA_EX + "None")
			else:
				print(Fore.LIGHTGREEN_EX + "\t\t\t  [i] Registrar: ")
				print(Fore.YELLOW + "\t\t\t\t ] ID:" + Fore.LIGHTMAGENTA_EX, __rWebRegId)
				print(Fore.YELLOW + "\t\t\t\t ] Name:" + Fore.LIGHTMAGENTA_EX, __rWebRegName)
				print(Fore.YELLOW + "\t\t\t\t ] Email:" + Fore.LIGHTMAGENTA_EX, __rWebRegEmail)
				print(Fore.YELLOW + "\t\t\t\t ] URL:" + Fore.LIGHTMAGENTA_EX, __rWebRegURL)
				print(Fore.YELLOW + "\t\t\t\t ] Phone:" + Fore.LIGHTMAGENTA_EX, __rWebRegPhone)
			# get networki info
			if __webNet == False:
				pass
			else:
				print(Fore.LIGHTGREEN_EX + "\t\t\t  [i] Network: ")
				print(Fore.YELLOW + "\t\t\t\t ] INETNUM:" + Fore.LIGHTMAGENTA_EX, __rWebNetInetnum)
				print(Fore.YELLOW + "\t\t\t\t ] Name:" + Fore.LIGHTMAGENTA_EX, __rWebNetName)
				print(Fore.YELLOW + "\t\t\t\t ] Handle:" + Fore.LIGHTMAGENTA_EX, __rWebNetHandle)

			# ask user for save log
			try:
				print(Fore.LIGHTWHITE_EX)
				__saveLog = "no"
				while __saveLog != 'y' or __saveLog != 'n':
					__saveLog = input("\n\t\t   [?] Do you want to save this log? [yes / no] (y / n) ~# ")
					if __saveLog == 'y' or __saveLog == 'yes' or __saveLog == 'Y' or __saveLog == 'Yes':
						print(Fore.GREEN + "\n\t\t  [i] Preparing log file...")
						#generate log file
						__logName = self.__ipUrl + "_" + self.__dateTimeNow + ".log"
						__tempLog = open(__logName, "w")
						__tempLog.write(self.__baseLog)
						__tempLog.close()

						try:
							print("\t\t  [i] Generating log file...")
							# read contents in the file
							with open(__logName, "r") as rawBaseCon:
								__inDat = rawBaseCon.read()
							# ready replacer
							__repDat = __inDat.replace("$IpDomain", self.__whatamI).replace("$ipUrl", self.__ipUrl).replace("$genDatetime", self.__dateTimeNow).replace("$name", __rWebName).replace("$created", __rWebCreated).replace("$changed", __rWebChanged).replace("$expires", __rWebExpires).replace("$dnssec", __rWebDnssec).replace("$registered", __rWebRegistered).replace("$status", __xrWebStatus).replace("$nameservers", __xrWebNS).replace("$owner-handle", __rWebConOwnerHandle).replace("$owner-type", __rWebConOwnerType).replace("$owner-name", __rWebConOwnerName).replace("$owner-organization", __rWebConOwnerOrganization).replace("$owner-email", __rWebConOwnerEmail).replace("$owner-address", __rWebConOwnerAddress).replace("$owner-zipcode", __rWebConOwnerAddress).replace("$owner-city", __rWebConOwnerCity).replace("$owner-state", __rWebConOwnerState).replace("$owner-country", __rWebConOwnerCountry).replace("$owner-phone", __rWebConOwnerPhone).replace("$owner-fax", __rWebConOwnerFax).replace("$owner-created", __rWebConOwnerCreated).replace("$owner-changed", __rWebConOwnerChanged).replace("$admin-handle", __rWebConAdminHandle).replace("$admin-type", __rWebConAdminType).replace("$admin-name", __rWebConAdminName).replace("$admin-organization", __rWebConAdminOrganization).replace("$admin-email", __rWebConAdminEmail).replace("$admin-address", __rWebConAdminAddress).replace("$admin-zipcode", __rWebConAdminAddress).replace("$admin-city", __rWebConAdminCity).replace("$admin-state", __rWebConAdminState).replace("$admin-country", __rWebConAdminCountry).replace("$admin-phone", __rWebConAdminPhone).replace("$admin-fax", __rWebConAdminFax).replace("$admin-created", __rWebConAdminCreated).replace("$admin-changed", __rWebConAdminChanged).replace("$tech-handle", __rWebConTechHandle).replace("$tech-type", __rWebConTechType).replace("$tech-name", __rWebConTechName).replace("$tech-organization", __rWebConTechOrganization).replace("$tech-email", __rWebConTechEmail).replace("$tech-address", __rWebConTechAddress).replace("$tech-zipcode", __rWebConTechAddress).replace("$tech-city", __rWebConTechCity).replace("$tech-state", __rWebConTechState).replace("$tech-country", __rWebConTechCountry).replace("$tech-phone", __rWebConTechPhone).replace("$tech-fax", __rWebConTechFax).replace("$tech-created", __rWebConTechCreated).replace("$tech-changed", __rWebConTechChanged).replace("$reg-id", __rWebRegId).replace("$reg-name", __rWebRegName).replace("$reg-email", __rWebRegEmail).replace("$reg-url", __rWebRegURL).replace("$reg-phone", __rWebRegPhone)

							try:
								# replace contents
								with open(__logName, "w") as rawCon:
									rawCon.write(__repDat)
								print("\n\t\t  [ok] Log Saved! Filename: '" +__logName + "'" + Style.RESET_ALL)
								break #exit
							except Exception as repErr:
								print(Fore.RED + "\n\t\t  [!] Replacing FAILED!", repErr)
						except Exception as openErr:
							print(Fore.RED + "\n\t\t  [!] Error!", openErr)
					elif __saveLog == 'n' or __saveLog == 'no' or __saveLog == "N" or __saveLog == "No":
						print(Fore.GREEN + "\n\t\t  [i] Done...")
						break #get out from the loop
					elif __saveLog == '' or __saveLog == None:
						pass
					else:
						pass
			except KeyboardInterrupt:
				print(Fore.GREEN + "\n\t\t  [i] Done...")
				pass
			except EOFError:
				print(Fore.GREEN + "\n\t\t  [i] Done...")
				pass
			except Exception as saveErr:
				print(Fore.RED + "\n\t\t [i] LOG Err!", saveErr)
		except KeyboardInterrupt:
			print(Fore.LIGHTRED_EX + "\n\t\t  [i] Cancelling...")
		except EOFError:
			print(Fore.LIGHTRED_EX + "\n\t\t  [i] Cancelling...")
		except Exception as e:
			print(Fore.RED + "\n\t\t [!] Error!", e)

# get url if available or not and if tld is invalid
class getWeb():
	def __init__(self, Url):
		super(getWeb, self).__init__()
		self.__Url = Url
		if self.__Url.startswith("http://") or self.__Url.startswith("https://"):
			self.__reqUrl = self.__Url.replace("http://", "").replace("https://", "")
		else:
			self.__reqUrl = self.__Url
		self.__baseValUrl = "https://madchecker.com/domain/api/" + self.__reqUrl + "?structured=true"
	def runCheck(self):
		print(Fore.GREEN + "\n\n\t\t\t  [i] Domain: " + Fore.MAGENTA + self.__reqUrl)
		try:
			__rawUrlResp = requests.get(self.__baseValUrl).json()
			try:
				getAvailable = __rawUrlResp['data']['available']
				if getAvailable == False:
					#run and get info about domain
					try:
						__urlWhoTemp = WhoIsSer(self.__reqUrl, "Domain / URL")
						__urlWhoTemp.runWebIp()
					except KeyboardInterrupt:
						print(Fore.LIGHTRED_EX + "\n\t\t  [i] Cancelling...")
					except EOFError:
						print(Fore.LIGHTRED_EX + "\n\t\t  [i] Cancelling...")
				else:
					#print that domain is available and do not get domain info
					print(Fore.GREEN + "\t\t\t  [i] DOMAIN/Url is Available!")
			except KeyError:
				#if domain check has erred
				try:
					getErr = __rawUrlResp['error']
					print(Fore.LIGHTRED_EX + "\t\t\t  [i]", getErr)
					print(Fore.YELLOW + "\n\t\t  [i] Retrying with IP Address...")
					# if error, try with IP Address
					self.__getWebIp()
				except KeyError:
					pass
				except Exception as reErr:
					print(Fore.RED + "\n\t\t [!] Err!", reErr)
		except Exception as respErr:
			print(Fore.RED + "\n\t\t  [!] Error!", respErr)
	# get ip address if domain not working
	def __getWebIp(self):
		try:
			__getIp = socket.gethostbyname(self.__reqUrl)
			print(Fore.GREEN + "\n\n\t\t\t  [i] IP Address: " + Fore.MAGENTA + __getIp)
			__ipWhoTempR = WhoIsSer(__getIp, "IP Address")
			__ipWhoTempR.runWebIp()
		except Exception as getIpErr:
			print(Fore.RED + "\n\t\t [!]", getIpErr)

#check if user input is IP or URL
def __checkIpWeb(ipWeb):
	try:
		if ipWeb.startswith("http://") or ipWeb.startswith("https://"):
			__chkIpWeb = socket.gethostbyname(ipWeb.replace("https://", "").replace("https://", ""))
		else:
			__chkIpWeb = socket.gethostbyname(ipWeb)

		if __chkIpWeb == ipWeb:
			return False # user input is IP Address
		else:
			return True # user input is URL / Website
	except socket.gaierror:
		if ipWeb.isalnum() or ipWeb.isalpha():
			print(Fore.RED + "\n\t\t  [!] Err! IP / Url doesn't seem to be valid! Try Again..." + Style.RESET_ALL)
		else:
			return True

#check for internet connection
def __checkNet():
	try:
        # connect to the host -- tells us if the host is actually reachable
        # use two process connection
		socket.create_connection(("www.google.com", 80))
		socket.create_connection(("www.google.com", 443))
		return True
	except OSError:
		pass
	return False

#for clear screen on 'run' and 'exit'
def __checkOs():
	try:
		osName = platform.system()
		#windows os
		if osName == 'Windows':
			return os.system("cls")
		#unix or linux os
		else:
			return os.system("clear")
	#is os is classified above
	except Exception as e:
		print(Fore.RED + "\n\t\t  [!] An Error has occurred!", e)

def __valUrl(inUrl):
	#validate url
	if not validators.url(inUrl):
		print(Fore.RED + "\n\t\t  [!] URL / IP is not valid! Try again...")
	else:
		__gWeb = getWeb(inUrl)
		__gWeb.runCheck()
def __valIp(rIp):

	#validate ip
	if not validators.ipv4(rIp):
		#print("here")
		print(Fore.RED + "\n\t\t  [!] IP Address is not valid! Try again...")
	else:
		print(Fore.GREEN + "\n\n\t\t\t  [i] IP Address: " + Fore.MAGENTA + rIp)
		__ipWhoTemp = WhoIsSer(rIp, "IP Address")
		__ipWhoTemp.runWebIp()

def __mainBanner():
	__banner = """

	`````        ````        ````` `.....        .....         ``...````                    `....``     
	+ssss:      osssso      :ssss+ :sssss       .sssss.    `-:/:-....-:::-`     hhhhh/  -ohddddddddhh+  
	.sssso`    -ssssss-     ossss. :sssss       .sssss.  `-/:.``````````.-::.   ddddd/ +ddddhsoosshhds  
	 +ssss-    +ssoosso    -ssss+  :sssss       .sssss. `/:.````     `````.:/-  ddddd/.ddddy`       .-  
	 -sssso   .sss::sss-   ossss-  :sssss.......:sssss.`/-.``           ```.-/- ddddd/.ddddd+:.`        
	  +ssss-  +sso``oss+  -ssss+   :ssssssssssssssssss../.``              ``.:/ ddddd/ +dddddddddys+-`  
	  -sssso`.sss:  :sss.`+ssss-   :sssss+++++++osssss.-:``               ``.-/`ddddd/  .+yhdddddddddh: 
	   +ssss-+sss`  `oss+-sssso`   :sssss       .sssss../``               ```:/ ddddd/      `.:/ohddddd.
	   -ssssosss/    /sssossss-    :sssss       .sssss.`::``             ```./` ddddd/ .         `ddddd.
	   `osssssss`    `ssssssso`    :sssss       .sssss. `::``           ```-:.  ddddd/`hhs/:-...:sddddy`
	    -ssssss/      /ssssss-     :sssss       .sssss.   .:-.`        ``.:/..  ddddd/`hddddddddddddds. 
	    `------`      `------`     `.....       `.....`     `----....---..`-++-`++///- `-:/+osssso+:`   
	                                                             `````    -/:oo/.                    
	               Simple DOMAIN / IP Lookup                                +yddyo+.                  
	                   > Check availability                                  .+yddyo/.                
	                     > Check information                                    .+yddyo/.              
	                                                                               .+yddyo/.            
	                 Version: 0.1 | Anna Kushina                                     .+yddyo/`          
	                                                                                   .+ydds: 
	"""
	return __banner

def __exitScript():
	__checkOs()
	print(Fore.LIGHTRED_EX + "\n\t  [i] Cleaning...")
	print(Fore.LIGHTRED_EX + "\t  [i] Exiting...")
	print(Fore.LIGHTRED_EX + "\n\t  [i] Have a GOOD Day! ")
	sys.exit(0)

def main():
	print(Fore.BLUE + __mainBanner() + Style.RESET_ALL)
	print(Fore.LIGHTBLACK_EX + "\t\t  Enter Website URL / DOMAIN / IP Address (ex: 'www.google.com' / '8.8.8.8')")
	print("\t\t\t [Type '00' or 'exit' to exit the script...]")
	try:
		__urlIp = "8.8.8.8" #set default value
		while __urlIp != "00" or __urlIp != "exit":
			print(Fore.CYAN)
			__urlIp = input("\t\t    [wh0is3r] (url/ip) ~#:> ")
			if __urlIp == "00" or __urlIp == "exit":
				__exitScript()
			elif __urlIp == "" or __urlIp == None:
				pass # do nothing when nothing is input by the user
			else:
				ipUrl = __checkIpWeb(__urlIp) #check first the ip
				if ipUrl == False:
					__valIp(__urlIp)
				elif ipUrl == True:
					if __urlIp.startswith("http://") or __urlIp.startswith("https://"):
						__valUrl(__urlIp)
					else:
						__valUrl("http://" + __urlIp)
				else:
					print("prob: ", ipUrl)
	except Exception as e:
		print(e)

if __name__ == '__main__':
	main()